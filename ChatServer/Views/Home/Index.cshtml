@{

	var user = ViewData["User"];
}
<script src="https://unpkg.com/@@aspnet/signalr@@1.0.0-rc1-final/dist/browser/signalr.js"></script>
<div class="row">
	<div class="col-sm-4 bg-light border">
		<h1 class="h1 text-center">Chats</h1>
		<ul id="contacts" class="list-group mb-2">
		</ul>
		<div class="text-center"><button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#myModal">Create new chat</button></div>

	</div>



	<!-- Add chat modal -->
	<div class="modal" id="myModal">
		<div class="modal-dialog">
			<div class="modal-content">

				<!-- Modal Header -->
				<div class="modal-header">
					<h4 class="modal-title">Create chat</h4>
					<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
				</div>

				<!-- Modal body -->
				<div class="modal-body">
					<label for="receiverInput" class="form-label">Enter E-Mail of a user:</label>
					<input class="form-control form-control-lg mb-2" id="receiverInput" name="receiverEmail" />
					<div class="text-center mb-2"><button class="btn btn-primary" id="addUserButton">Add user</button></div>
					<div id="usersDiv" class="bg-light text-center mb-1">
						<h5>Users</h5>
						<ul id="userslist" class="list-group" style="margin:0 20% 0 20%">
						</ul>
					</div>
					<label for="chatNameInput" class="form-label">Name of the chat:</label>
					<input class="form-control" placeholder="The craziest party ever..." form-control-lg mb-2" id="chatNameInput" name="chatNameInput" />
				</div>

				<!-- Modal footer -->
				<div class="modal-footer">
					<button type="button" id="addChatBtn" class="btn btn-primary" data-bs-dismiss="modal">Create chat</button>
				</div>

			</div>
		</div>
	</div>







	<div class="col-sm-8 bg-light border p-0">
		<div id="hintH" class="card">


			<div class="card-body">
				<h3 class="text-center">Add a new chat or select existing!</h3>
			</div>
		</div>

		<div id="chat">
			<nav class="navbar navbar-inverse">
				<div class="container-fluid">
					<div class="navbar-header">
						<h3 class="" id="chatheader" class="text-center h3">Send a message</h3>
					</div>

					<button class="btn btn-outline-primary navbar-btn" id="openEditButton" data-bs-toggle="modal" data-bs-target="#editChatModal"><img class="" src="~/img/settings.svg" style="width: 30px" /></button>
				</div>
			</nav>

			<div id="chatbox" class="bg-light">



				<div class="" id="messageBox" style="overflow-y: scroll; height:400px;"></div>


				<form onsubmit="return false;">






					<div class="input-group mb-3">
						<textarea autofocus placeholder="Type your message..." class="form-control" id="textInput"></textarea>

						<div class="input-group-append">
							<input id="sendButton" class="btn btn-primary " type="button" onclick="SendMessage()" value="Send" />
						</div>
					</div>







				</form>
				<!-- Edit chat modal -->
				<div class="modal" id="editChatModal">
					<div class="modal-dialog">
						<div class="modal-content">

							<!-- Modal Header -->
							<div class="modal-header">
								<h4 class="modal-title">Edit chat</h4>
								<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
							</div>

							<!-- Modal body -->
							<div class="modal-body">
								<h5>Name of the chat</h5>

								<label for="chatEditNameInput" class="form-label">Name of the chat:</label>
								<input class="form-control  mb-1" placeholder="The craziest party ever..." id="chatEditNameInput" name="chatEditNameInput" />
								<hr class="hr" />
								<div id="usersSelectedChat" style="margin:0 20% 0 20%" class="bg-white text-center mb-1">
									<h5>Users</h5>
									<ul id="userslistSelectedChat" class="list-group">
									</ul>
									<label for="addUserToSelectedChat" class="form-label">Enter E-Mail of a user:</label>
									<input class="form-control mb-1" id="addUserToSelectedChat" name="addUserToSelectedChat" />
									<div class="text-center mb-1"><button class="btn btn-outline-primary" id="addUserToSelectedChatBtn">Add user</button></div>
								</div>
								<hr class="hr" />
								<div class="text-center">
									<button type="button" id="clearConversationBtn" onclick="DeleteConversation()" class="btn btn-outline-danger" data-bs-dismiss="modal">Clear conversation</button>
									<button type="button" id="deleteConversationBtn" class="btn btn-outline-danger" data-bs-dismiss="modal">Delete chat</button>
								</div>

							</div>

							<!-- Modal footer -->
							<div class="modal-footer">
								<button type="button" id="saveChangesBtn" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
								<button type="button" id="cancelChanges" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
							</div>

						</div>
					</div>
				</div>

			</div>
		</div>
	</div>
</div>



@section scripts {




	<script>

		// Establish connection with SignalR Hub
		var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
		connection.start().then(function () {
			console.log("Connection established succesfully");
		}).catch(function (err) {
			alert("Pizdec");
			return console.error(err.toString());
		});
		// Start polling for a signals
		connection.on("ReceiveMessage", function () {
			console.log("New Message!");
			LoadChats();
		});

		chatCount = 0;
		var mbox = document.getElementById("messageBox");
		mbox.style.display = "none";

		var selectedChat = null;
		var selectedChatId = null;
		var loggedUser = '@user';

		var initConnection = true;


		var chatDiv = document.getElementById("chat");
		chatDiv.style.display = "none";

		// Restrict updating form by typing enter
		document.getElementById('textInput').onkeydown = function (e) {
			if (e.keyCode == 13) {
				SendMessage();
			}
		};


		var chatbox = document.getElementById("chatbox");
		chatbox.style.display = "block";



		// First load
		window.onload = function () {
			LoadChats();
		}

		// Get user info from database
		function GetUser(userEmail) {
			$.ajax({
				type: "GET",
				url: '@Url.Action("GetUser")',
				contentType: "application/json",
				data: { email: userEmail },
				dataType: "json",
				success: function (responce) {
					var user = JSON.parse(responce);
					console.log("User exists");

					AddToList(user);

				},
				error: function () {
					console.log("Error getting user")
				}

			});
		}

		
		function GetUserSelectedChat(userEmail) {
			$.ajax({
				type: "GET",
				url: '@Url.Action("GetUser")',
				contentType: "application/json",
				data: { email: userEmail },
				dataType: "json",
				success: function (responce) {
					var user = JSON.parse(responce);


					AddToSelectedChat(user);

				},
				error: function () {
					console.log("Error getting user")
				}

			});
		}

		// Add a header
		function ShowChat(name) {
			chatbox.style.display = "block";

			var chatheader = document.getElementById("chatheader");
			if (name != null) {
				mbox.style.display = "block";
				chatheader.innerHTML = name;
			}
			else {
				chatheader.innerHTML = 'Select a contact or start a new conversation!';
			}



		}
		// AJAX Query to add new chat
		function AddChat(users, Name) {
			var id = uuidv4();
			console.log("Id - " + id);
			var model = {
				Id: id,
				users: users,
				Title: Name,
			};

			$.ajax(
				{
					type: "POST",
					url: '@Url.Action("AddChat")',
					data: JSON.stringify(model),
					contentType: "application/json",
					success: function () {
						connection.invoke("SendToEveryone").catch(function (err) {
							return console.error(err.toString());
						});
						LoadChats()

					},
					error: function () {
						alert("An error occurred while posting the data");
					}
				});


		}

		// AJAX Query to edit a chat
		function EditChat(users, Name) {

			var model = {
				ChatId: selectedChat.Id,
				users: users,
				Title: Name,
			};

			$.ajax(
				{
					type: "POST", //HTTP POST Method
					url: '@Url.Action("EditChat")', // Controller/View
					data: JSON.stringify(model),
					contentType: "application/json",
					success: function () {
						connection.invoke("SendMessage", selectedChat.Id).catch(function (err) {
							return console.error(err.toString());
						});
						LoadChats()
					},
					error: function () {
						alert("An error occurred while posting the data");
					}

				});
		}

		// AJAX Query to clear a chat
		function DeleteConversation() {
			if (selectedChat != null) {

				var model = {
					ChatID: selectedChat.Id,
				};
				$.ajax(
					{
						type: "POST", //HTTP POST Method
						url: '@Url.Action("DeleteConversation")', // Controller/View
						data: JSON.stringify(model),
						contentType: "application/json",
						success: function () {
							connection.invoke("SendMessage", selectedChat.Id).catch(function (err) {
								return console.error(err.toString());
							});
							LoadChats()
						},
						error: function () {
							alert("An error occurred while posting the data");
						}

					});
			}


		}

		 //AJAX Query to delete a chat
		function DeleteChat() {
			if (selectedChat != null) {

				var model = {
					ChatID: selectedChat.Id,
				};
				$.ajax(
					{
						type: "POST", //HTTP POST Method
						url: '@Url.Action("DeleteChat")', // Controller/View
						data: JSON.stringify(model),
						contentType: "application/json",
						success: function () {
							connection.invoke("SendMessage", model.ChatID).catch(function (err) {
								return console.error(err.toString());
							});
							selectedChat = null;
							LoadChats()
						},
						error: function () {
							alert("An error occurred while posting the data");
						}

					});
			}

		}




		//AJAX Query to send a message to the selected chat
		function SendMessage() {
			if (selectedChat != null && document.getElementById("textInput").value != "") {
				document.getElementById("textInput").style.height = "30px";
				var model = {
					Content: document.getElementById("textInput").value,
					ChatId: selectedChat.Id
				};
				$.ajax(
					{
						type: "POST",
						url: '@Url.Action("SendMessage")',
						data: JSON.stringify(model),
						contentType: "application/json",
						success: function () {
							connection.invoke("SendMessage", selectedChat.Id).catch(function (err) {
								return console.error(err.toString());
							});
							LoadChats()
						},
						error: function () {
							alert("An error occurred while posting the data");
						}

					});
				document.getElementById("textInput").value = "";
			}

		}



		// Add chat UI elements from the query
		function ShowChats(chats) {

			var contactsUl = document.getElementById("contacts");
			contactsUl.innerHTML = "";

			for (i = 0; i < chats.length; i++) {

				var li = document.createElement("li");
				li.appendChild(document.createTextNode(chats[i].Title));
				li.classList.add("list-group-item");
				li.onclick = (function (chat) {
					return function () {
						selectedChat = chat;
						selectedChatId = chat.Id;
						ShowMessages(chat.Messages);
					};
				})(chats[i]);
				contactsUl.appendChild(li);
			}


		}
		// AJAX Query to get chats from database
		function LoadChats() {
			$.ajax({
				type: "GET",
				url: '@Url.Action("GetChats")',
				contentType: "application/json",
				dataType: "json",
				success: function (data) {
					console.log("Updating Chats");
					console.log(JSON.parse(data).length);
					if (selectedChatId != null && JSON.parse(data).find(x => x.Id === selectedChatId)) {
						selectedChat = JSON.parse(data).find(x => x.Id === selectedChatId);

						ShowMessages(selectedChat.Messages)
					}
					else {
						selectedChat = null;
						selectedChatId = null;
						chatDiv.style.display = "none";
						var hint = document.getElementById("hintH");
						hint.style.display = "block";
					}
					if (JSON.parse(data).length != chatCount) {
						console.log("im here");
						JSON.parse(data).forEach(group => {
							connection.invoke("JoinGroup", group.Id);
						});
						initConnection = false;
						chatCount = JSON.parse(data).length;
					}


					ShowChats(JSON.parse(data));
				},
				error: function () {
					console.log("Error getting chats")
				}

			});
		}


		// Add messages UI elements to the document
		function ShowMessages(messages) {
			chatDiv.style.display = "block";
			var hint = document.getElementById("hintH");
			hint.style.display = "none";
			var messageBox = document.getElementById("messageBox");
			messageBox.innerHTML = "";

			messages.sort(function (b, a) {
				return new Date(b.Date) - new Date(a.Date);
			});

			for (i = 0; i < messages.length; i++) {

				var date = new Date(Date.parse(messages[i].Date))
				var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
				var message = messages[i].Content.replace(/</g, "&lt;").replace(/>/g, "&gt;");
				var dateStr = date.getDay().toString() + ". " + date.getMonth().toString() + ". " + date.getFullYear().toString() + " | " + date.getHours().toString() + ":" + date.getMinutes().toString();
				dateStr = date.toLocaleDateString("en-US", options) + " | " + ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2);;
				if (messages[i].user.Id == loggedUser) {
					var htmlText = ` <div style="word-wrap: break-word;"> <p class=" p-2 me-3 mb-1 text-white rounded-3 bg-primary" style="margin:0 25px 0 25px">${message}<p class="small d-inline  mb-3 rounded-3 text-muted float-left" style="margin-left:30px;">${messages[i].user.FirstName}</p><p class="small d-inline  mb-3 rounded-3 text-muted float-end" style="margin-right:25px;">${dateStr}</p></div> `
					
					messageBox.innerHTML = messageBox.innerHTML + htmlText;

				}
				else {
					var htmlText = ` <div style="word-wrap: break-word;"> <p class=" p-2 me-3 mb-1  rounded-3 bg-white" style="margin:0 25px 0 25px">${message}<p class="small d-inline  mb-3 rounded-3 text-muted float-left" style="margin-left:30px;">${messages[i].user.FirstName}</p><p class="small d-inline  mb-3 rounded-3 text-muted float-end" style="margin-right:25px;">${dateStr}</p></div> `
					messageBox.innerHTML = messageBox.innerHTML + htmlText;

				}



			}
			messageBox.scrollTop = messageBox.scrollHeight - messageBox.clientHeight;
			ShowChat(selectedChat.Title);
		}



	</script>
	<script src="~/js/EditChat.js"></script>
	<script src="~/js/site.js"></script>
	<script src="~/js/AddChat.js"></script>
}

